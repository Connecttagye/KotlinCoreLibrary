package ak.core.ui.compnents.snackbarsimport ak.core.ui.Rimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.animation.slideInVerticallyimport androidx.compose.animation.slideOutVerticallyimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Snackbarimport androidx.compose.material3.SnackbarDefaultsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.Shapeimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.unit.dp@Composablefun ConnectivityStatusSnackbar(isConnected: Boolean) {    var isVisible by remember { mutableStateOf(false) }    LaunchedEffect(isConnected) {        isVisible = !isConnected    }    AnimatedVisibility(        visible = isVisible,        enter = slideInVertically(initialOffsetY = { it }),        exit = slideOutVertically(targetOffsetY = { it })    ) {        Snackbar(            action = {                Text(                    text = "إغلاق",                    color = MaterialTheme.colorScheme.onPrimary,                    modifier = Modifier.clickable { isVisible = false }                )            },                    containerColor = MaterialTheme.colorScheme.errorContainer,            contentColor = MaterialTheme.colorScheme.onPrimary,        ) {            Text(if (isConnected) "تم استعادة الاتصال بالإنترنت" else  stringResource(R.string.check_internet_connection) )        }    }}@Composablefun Ak_Snackbar(modifier: Modifier,                action: @Composable (() -> Unit)? = null,                dismissAction: @Composable (() -> Unit)? = null,                actionOnNewLine: Boolean = false,                shape: Shape = SnackbarDefaults.shape,                containerColor: Color = SnackbarDefaults.color,                contentColor: Color = SnackbarDefaults.contentColor,                actionContentColor: Color = SnackbarDefaults.actionContentColor,                dismissActionContentColor: Color = SnackbarDefaults.dismissActionContentColor,                content: @Composable () -> Unit                ) {        Snackbar(            action = {            },                    containerColor = containerColor,            contentColor = containerColor,            actionContentColor = containerColor,        ) {            content()        }}