package ak.core.ui.compnentsimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.KeyboardArrowDownimport androidx.compose.material.icons.rounded.KeyboardArrowUpimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.ColorFilterimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.unit.dp@Composablefun Ak_ExpandableSection(    modifier: Modifier = Modifier,    title: String,    icon: ImageVector? = null,    content: @Composable () -> Unit) {    var isExpanded by rememberSaveable { mutableStateOf(false) }    Card(        modifier = Modifier            .fillMaxWidth()            .fillMaxHeight()            .padding( 0.dp,0.dp,  0.dp,  20.dp),        shape = RoundedCornerShape(10.dp),    ) {        Column(            modifier = modifier                .clickable { isExpanded = !isExpanded }                .fillMaxWidth()        ) {            Ak_ExpandableSectionTitle(isExpanded = isExpanded, title = title, icon = icon )            AnimatedVisibility(                modifier = Modifier                    .fillMaxWidth(),                visible = isExpanded            ) {                content()            }        }    }}@Composablefun Ak_ExpandableSectionTitle(modifier: Modifier = Modifier, isExpanded: Boolean, title: String, icon: ImageVector? = null) {    val iconArrow = if (isExpanded) Icons.Rounded.KeyboardArrowUp else Icons.Rounded.KeyboardArrowDown    Row(        modifier = Modifier.fillMaxWidth().height(60.dp),        horizontalArrangement = Arrangement.SpaceBetween,        verticalAlignment = Alignment.CenterVertically    ) {        icon?.let {            Ak_Icon( modifier = modifier                .padding(horizontal = 12.dp)                .size(24.dp),icon = icon,contentDescription = title)        }        Text(text = title)        Spacer(modifier = Modifier.weight(1f))        Image(            modifier = Modifier.size(32.dp),            imageVector = iconArrow,            colorFilter = ColorFilter.tint(color = MaterialTheme.colorScheme.onPrimary),            contentDescription = ""        )    }}